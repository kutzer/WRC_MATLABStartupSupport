% --------------------

# Specify the directory path
$directoryPath = "C:\Users\kutzer\Documents"

# Specify the file extensions to filter
$fileExtensions = @(".m", ".mat")

# Calculate the current time and the time 360 seconds ago
$currentDateTime = Get-Date
$startTime = $currentDateTime.AddSeconds(-360)

# Get files in the specified directory and its subdirectories with specified extensions modified within the last 360 seconds
$recentFiles = Get-ChildItem -Path $directoryPath -Recurse | Where-Object {
    ($_.LastWriteTime -ge $startTime) -and ($fileExtensions -contains $_.Extension)
}

# Display the list of recent files
foreach ($file in $recentFiles) {
    Write-Host "$($file.FullName)"
}

% -------------------------

# Set the path to the directory you want to open
$folderPath = "C:\Users\kutzer\Documents\MATLAB"

# Open the folder in File Explorer
Start-Process "explorer.exe" -ArgumentList $folderPath

# Wait for the Explorer window to open
Start-Sleep -Seconds 2

# Check if the User32 class already exists
if (-not ([System.Management.Automation.PSTypeName]'User32').Type) {
    # Import the necessary user32.dll functions
    Add-Type @"
        using System;
        using System.Runtime.InteropServices;
        public class User32 {
            [DllImport("user32.dll", SetLastError = true)]
            public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

            [DllImport("user32.dll")]
            [return: MarshalAs(UnmanagedType.Bool)]
            public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
        }
"@
}

# Find the Explorer window by its title
$explorerWindow = [User32]::FindWindow([NullString]::Value, "File Explorer")

if ($explorerWindow -ne [IntPtr]::Zero) {
    # Maximize the window to half the screen
    [User32]::ShowWindow($explorerWindow, 3)  # 3 is the code for maximizing the window
} else {
    Write-Host "Explorer window not found."
}
